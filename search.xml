<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023Asuri暑假培训-Reverse-1</title>
    <url>/post/4c5ffb3d.html</url>
    <content><![CDATA[<h1 id="Re-静态分析入门-1"><a href="#Re-静态分析入门-1" class="headerlink" title="Re-静态分析入门-1"></a>Re-静态分析入门-1</h1><p>2023.8.5 by Shen_Fan</p>
<h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识-1"></a>前置知识-1</h3><h4 id="0x1-一段C代码是如何跑起来的"><a href="#0x1-一段C代码是如何跑起来的" class="headerlink" title="0x1 一段C代码是如何跑起来的"></a>0x1 一段C代码是如何跑起来的</h4><p>*以下内容仅作了解</p>
<p>以下是我们作为示例的一段c代码hello.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>); <span class="comment">//打印Hello World!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>C语言不像python，python作为一门脚本语言，拥有自己的专用解释器来运行。所有的代码会在转换后喂给解释器，再由解释器解释运行。而C语言需要经过编译直接转化为最底层的机器代码，直接喂给CPU运行。因此，C语言的效率远高于python。</p>
<p>C语言一般的编译过程如图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">src[源代码.c]--预处理--&gt;o[预处理文件.i]--编译--&gt;s[汇编.s]--汇编&amp;链接--&gt;e[可执行文件]</span><br></pre></td></tr></table></figure>

<p>接下来，我们将一步步分析编译的过程。</p>
<h5 id="0b01-预处理"><a href="#0b01-预处理" class="headerlink" title="0b01 预处理"></a>0b01 预处理</h5><p>1.删除所有的注释</p>
<p>2.拓展宏（#define语句）</p>
<p>3.包含文件(#include语句)</p>
<p>经过预处理的hello.i文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span> <span class="string">&quot;hello_world.c&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;hello_world.c&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/stdio.h&quot;</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"># <span class="number">9</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/stdio.h&quot;</span> <span class="number">3</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/crtdefs.h&quot;</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下省略若干行</span></span><br><span class="line"></span><br><span class="line"># <span class="number">1398</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/stdio.h&quot;</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/_mingw_print_pop.h&quot;</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"># <span class="number">1400</span> <span class="string">&quot;E:/mingw64/x86_64-w64-mingw32/include/stdio.h&quot;</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;hello_world.c&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;hello_world.c&quot;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="0b10-编译"><a href="#0b10-编译" class="headerlink" title="0b10 编译"></a>0b10 编译</h5><p>编译过程会将预处理文件转化为汇编语言。汇编代码是一门面向底层的低级语言。语句较为简单，例如把某个数字存到寄存器，把寄存器的某些值进行数学运算等等。</p>
<p>hello.i编译得到的汇编文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	.file	&quot;hello_world.c&quot;</span><br><span class="line">	.text</span><br><span class="line">	.def	__main;	.scl	2;	.type	32;	.endef</span><br><span class="line">	.section .rdata,&quot;dr&quot;</span><br><span class="line">.LC0:</span><br><span class="line">	.ascii &quot;hello world!\0&quot;</span><br><span class="line">	.text</span><br><span class="line">	.globl	main</span><br><span class="line">	.def	main;	.scl	2;	.type	32;	.endef</span><br><span class="line">	.seh_proc	main</span><br><span class="line">main:</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	.seh_pushreg	%rbp</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	.seh_setframe	%rbp, 0</span><br><span class="line">	subq	$32, %rsp</span><br><span class="line">	.seh_stackalloc	32</span><br><span class="line">	.seh_endprologue</span><br><span class="line">	call	__main</span><br><span class="line">	leaq	.LC0(%rip), %rcx</span><br><span class="line">	call	printf</span><br><span class="line">	movl	$0, %eax</span><br><span class="line">	addq	$32, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	ret</span><br><span class="line">	.seh_endproc</span><br><span class="line">	.ident	&quot;GCC: (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0&quot;</span><br><span class="line">	.def	printf;	.scl	2;	.type	32;	.endef</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="0b11-汇编-链接"><a href="#0b11-汇编-链接" class="headerlink" title="0b11 汇编&amp;链接"></a>0b11 汇编&amp;链接</h5><p>首先，汇编程序将.s文件转化为二进制的目标文件（.o），然后链接器将库或者是其他文件链接到该文件中产生可直接运行的程序（.exe等等）。</p>
<p>当我们谈到运行C语言程序时，运行的就是最后得到的二进制文件而非从源代码开始再编译一遍。Reverse便是要从最后得到的二进制文件出发尝试还原源码的逻辑。</p>
<p>IDA的功能便是以CPU的视角将二进制文件（一堆看上去意义不明的0和1）解析为一堆汇编代码，然后再根据逻辑划分程序的各个部分并试图还原C语言代码。但已经在编译过程中丢失的东西（如注释）都已经永远的被删除了，留下的只有IDA的推测。</p>
<h4 id="0x2-IDA的基本使用方法"><a href="#0x2-IDA的基本使用方法" class="headerlink" title="0x2 IDA的基本使用方法"></a>0x2 IDA的基本使用方法</h4><p>如果你已经下载并查看过IDA，就会发现IDA拥有ida.exe和ida64.exe两个可执行文件。ida.exe用于32位的文件，ida64.exe用于64位的程序。若要查看某个程序是32位还是64位，可以使用exeinfope(仅适用于Windows)，linux下的控制台file指令，以及我正在研究的DIE-engine。</p>
<p>将程序拖到IDA的exe文件上，ida就会识别这个程序的信息。一路ok过去后再等待一段时间，IDA就能成功反编译（也有可能寄了）这个程序。IDA的左侧为函数窗口，显示了程序中所有以及被识别了的函数（绝大多数会是库函数），以下为IDA的常用快捷键及功能：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>F5</td>
<td>一键反汇编当前函数并生成类c代码</td>
</tr>
<tr>
<td>shift + F12</td>
<td>一键显示程序中的所有字符串</td>
</tr>
<tr>
<td>x</td>
<td>选择某个函数或变量，查看程序所有用到这些的地方</td>
</tr>
<tr>
<td>shift + e</td>
<td>选中区域或变量，一键得到其中的数值</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>在伪代码页面写下注释</td>
</tr>
<tr>
<td>u</td>
<td>将某个函数的定义取消</td>
</tr>
<tr>
<td>p</td>
<td>在此处定义函数</td>
</tr>
<tr>
<td>c</td>
<td>将机器码（16进制的一堆数值）编译为汇编代码</td>
</tr>
</tbody></table>
<h4 id="0x3-C语言常见函数"><a href="#0x3-C语言常见函数" class="headerlink" title="0x3 C语言常见函数"></a>0x3 C语言常见函数</h4><p>首先向我们走来的是来自stdio.h的输入输出函数</p>
<p>stdin代表一个指向标准输入（键盘）的指针</p>
<p>stdout代表一个指向标准输出（屏幕）的指针</p>
<p>stderr代表一个指向标准错误（也是屏幕）的指针</p>
<table>
<thead>
<tr>
<th>函数声明</th>
<th>具体作用</th>
</tr>
</thead>
<tbody><tr>
<td>int getchar(void)</td>
<td>返回下一个输入单个字符的值</td>
</tr>
<tr>
<td>int putchar(int c)</td>
<td>输出单个字符c</td>
</tr>
<tr>
<td>char *gets(char *s)</td>
<td>从stdin读取一行到s，若出错返回NULL，否则s</td>
</tr>
<tr>
<td>int puts(const char *s)</td>
<td>向stdout写入字符串s和一个换行，返回输出的字符数量</td>
</tr>
<tr>
<td>int scanf(const char *format, …)</td>
<td>从stdin读入符合format规则的输入至之后的地址，返回成功读入的变量数量</td>
</tr>
<tr>
<td>int printf(const char *format, …)</td>
<td>根据format规则输出到stdout，返回成功打印的字符数量。</td>
</tr>
</tbody></table>
<p>然后是来自string.h的字符串函数</p>
<p>size_t是头文件中用来保存大小的类型，是sizeof()的结果</p>
<table>
<thead>
<tr>
<th>函数声明</th>
<th>具体作用</th>
</tr>
</thead>
<tbody><tr>
<td>size_t strlen(const char *str)</td>
<td>返回str指向的字符串的长度</td>
</tr>
<tr>
<td>int strcmp(const char* s1, const char* s2)</td>
<td>比较s1和s2指向的字符串，返回0代表相等</td>
</tr>
<tr>
<td>char <em>strcpy(char</em> dst, const char*src)</td>
<td>将src所指的字符串复制到dst</td>
</tr>
<tr>
<td>void *memset(void *str,int c, size_t n)</td>
<td>复制c到str的前n个字符</td>
</tr>
</tbody></table>
<h3 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识-2"></a>前置知识-2</h3><h5 id="c语言中的位运算"><a href="#c语言中的位运算" class="headerlink" title="c语言中的位运算"></a>c语言中的位运算</h5><p>和他的名字一样，位运算就是对变量中的位进行运算。位运算符号一共有6种，如下表</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&amp; 与</td>
<td>位都为1结果才位1</td>
</tr>
<tr>
<td>| 或</td>
<td>位存在1结果为1</td>
</tr>
<tr>
<td>^ 异或</td>
<td>位不同则结果为1</td>
</tr>
<tr>
<td>~ 取反</td>
<td>0-&gt;1, 1-&gt;0</td>
</tr>
<tr>
<td>&lt;&lt; 左移</td>
<td>二进制位左移若干位</td>
</tr>
<tr>
<td>&gt;&gt; 右移</td>
<td>二进制位右移若干位，注意有符号数高位补符号位，无符号数高位补0</td>
</tr>
</tbody></table>
<p>接下来是每种运算符的运算演示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&amp;:</span><br><span class="line">(<span class="type">char</span>) <span class="number">0x12</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">(<span class="type">char</span>) <span class="number">0x6B</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">    -----------------------------</span><br><span class="line">             <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">|:</span><br><span class="line">(<span class="type">char</span>) <span class="number">0x12</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">(<span class="type">char</span>) <span class="number">0x6B</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">    -----------------------------</span><br><span class="line">             <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">^:</span><br><span class="line">(<span class="type">char</span>) <span class="number">0x12</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">(<span class="type">char</span>) <span class="number">0x6B</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">    -----------------------------</span><br><span class="line">             <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">注: c = a ^ b</span><br><span class="line">则  a ^ c == b</span><br><span class="line">    </span><br><span class="line">~:</span><br><span class="line"><span class="type">char</span> a = <span class="number">0x12</span> <span class="comment">/*(0 0 0 1 0 0 1 0)*/</span>;</span><br><span class="line">	 a = ~a;</span><br><span class="line">    a == <span class="number">0xED</span> <span class="comment">/*(1 1 1 0 1 1 0 1)*/</span>;</span><br><span class="line"></span><br><span class="line">&lt;&lt;:</span><br><span class="line"><span class="type">char</span> a = <span class="number">0x12</span> <span class="comment">/*(0 0 0 1 0 0 1 0)*/</span>;</span><br><span class="line">	 a = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    a == <span class="number">0x48</span> <span class="comment">/*(0 1 0 0 1 0 0 0)*/</span>;</span><br><span class="line"></span><br><span class="line">&gt;&gt;:</span><br><span class="line"><span class="type">char</span>          a = <span class="number">0x89</span> <span class="comment">/*(1 0 0 0 1 0 0 1)*/</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">0x89</span> <span class="comment">/*(1 0 0 0 1 0 0 1)*/</span>;</span><br><span class="line">              a = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line">              b = b &gt;&gt; <span class="number">2</span>;</span><br><span class="line">             a == <span class="number">0xE2</span> <span class="comment">/*(1 1 1 0 0 0 1 0)*/</span>;</span><br><span class="line">             b == <span class="number">0x22</span> <span class="comment">/*(0 0 1 0 0 0 1 0)*/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="例题-test-your-ida-exe"><a href="#例题-test-your-ida-exe" class="headerlink" title="例题-test_your_ida.exe"></a>例题-test_your_ida.exe</h3><p>测试ida是否正常运行的题，对main函数按下F5得到flag。</p>
<h3 id="例题-ida-PRO-exe"><a href="#例题-ida-PRO-exe" class="headerlink" title="例题-ida_PRO.exe"></a>例题-ida_PRO.exe</h3><p>根据提示，main函数在按下F5后得到第一部分flag，按下shift + f12查看字符串得到第二部分flag，注意到字符串里有个让我们按x查引用的字符串，对他按x进入函数后得到最后一部分flag。</p>
<h3 id="例题-bit-operation-exe"><a href="#例题-bit-operation-exe" class="headerlink" title="例题-bit_operation.exe"></a>例题-bit_operation.exe</h3><p>由strlen的判断得知flag长度为37.</p>
<p>观察加密函数encrypto发现每个字符都被前四位和后四位调换后异或上了0x11,故考虑将其先异或0x11再进行前四位和后四位调换以获得flag。</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>2023SharkCTF-week1-Reverse-XOR详解</title>
    <url>/post/5147a1d5.html</url>
    <content><![CDATA[<h1 id="2023SharkCTF-week1-Reverse-XOR详解"><a href="#2023SharkCTF-week1-Reverse-XOR详解" class="headerlink" title="2023SharkCTF-week1-Reverse-XOR详解"></a>2023SharkCTF-week1-Reverse-XOR详解</h1><p>2023.8.15 by Shen_Fan</p>
<hr>
<p>经过第一周的学习，相信大家对逆向工程都有了一个初步的了解。考虑到很多人都是还没入学的新生，这篇wp将更多地聚焦于工具的使用与代码的阅读而非flag如何获取。</p>
<p>由于时间有限，只能针对有人提出的XOR进行详解，若有其他问题欢迎来群里私戳我。</p>
<h2 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h2><h3 id="0b0程序逻辑详解"><a href="#0b0程序逻辑详解" class="headerlink" title="0b0程序逻辑详解"></a>0b0程序逻辑详解</h3><p>原本是第二周的签到题，由于一些失误导致被放到了第一周（不然第一周都是不用写脚本的简单题）。现在，我将逐行为各位讲解ida反汇编得到的类c代码</p>
<span id="more"></span>

<p>首先，把XOR.exe拖到ida64.exe中，解析完成后按下<strong>F5</strong>查看类c代码。我们从第一行开始看起</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p>一开始是main函数的定义，第一个字符串”int”代表着该函数的返回值为int，第二个字符串”__cdecl”定义如下：</p>
<blockquote>
<p>__cdecl是C Declaration的缩写（declaration，声明），cdecl调用方式又称为C调用方式，是C语言缺省的调用方式。<br>他意味着：<br>（1）参数从右向左依次压入堆栈.<br>（2）由调用者恢复堆栈，称为手动清栈。<br>（3）函数名自动加前导下划线。</p>
</blockquote>
<p>缺省意味着该函数的某些参数可以留空，所以我们在编写程序时可以直接以int main(void) {}定义main函数</p>
<p>第三个字符串main代表着该函数名为main，也是一般c&#x2F;c++程序中的入口函数（实际上并不是最先执行的函数，在第二周的某些题中就可看到[狗头]）。</p>
<p>接下来的括号里则是main函数的三个参数，对于main函数，这些参数来自命令行和运行环境，有兴趣可以自行搜索了解。</p>
<p>下一行的花括号代表从这里开始到一个’}’是main函数的定义部分，就是这个函数里有啥，干了啥。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> Str[<span class="number">48</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">__int16 v5; <span class="comment">// [rsp+50h] [rbp-30h]</span></span><br><span class="line"><span class="type">char</span> v6[<span class="number">36</span>]; <span class="comment">// [rsp+60h] [rbp-20h] BYREF</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [rsp+84h] [rbp+4h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+88h] [rbp+8h]</span></span><br><span class="line"><span class="type">char</span> v9; <span class="comment">// [rsp+8Eh] [rbp+Eh]</span></span><br><span class="line"><span class="type">char</span> v10; <span class="comment">// [rsp+8Fh] [rbp+Fh]</span></span><br></pre></td></tr></table></figure>

<p>接下来是若干行变量的声明。ida所反汇编得到的代码通常会在最开始将所有变量都进行声明。例如第一行声明了一个名为”Str”的变量，他是char类型，长为48的数组。之后的注释[rsp+xxh]和[rbp+xxh]则是代表该变量在<strong>栈</strong>中的位置。对于Reverse方向的初学者，只需要知道rbp和rsp中分别保存了栈在内存中的起始位置和结束位置，而后面的注释表明了这个变量相对这两个地址的位置。栈通常用来保存局部变量，也就是只在这个函数中使用的变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_main(argc, argv, envp);</span><br></pre></td></tr></table></figure>

<p>用于初始化某些东西的函数，是由编译器生成的函数。re的一个难点便在于分辨人为书写的函数与库函数和编译器生成的函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">qmemcpy(v6, <span class="string">&quot;qkdzfvVQ\&quot;&quot;</span>, <span class="number">9</span>);</span><br><span class="line">v6[<span class="number">9</span>] = <span class="number">-24</span>;</span><br><span class="line">v6[<span class="number">10</span>] = <span class="number">-39</span>;</span><br><span class="line">v6[<span class="number">11</span>] = <span class="number">11</span>;</span><br><span class="line">v6[<span class="number">12</span>] = <span class="number">61</span>;</span><br><span class="line">v6[<span class="number">13</span>] = <span class="number">-22</span>;</span><br><span class="line">v6[<span class="number">14</span>] = <span class="number">78</span>;</span><br><span class="line">v6[<span class="number">15</span>] = <span class="number">71</span>;</span><br><span class="line">v6[<span class="number">16</span>] = <span class="number">100</span>;</span><br><span class="line">v6[<span class="number">17</span>] = <span class="number">3</span>;</span><br><span class="line">v6[<span class="number">18</span>] = <span class="number">-74</span>;</span><br><span class="line">v6[<span class="number">19</span>] = <span class="number">28</span>;</span><br><span class="line">v6[<span class="number">20</span>] = <span class="number">-125</span>;</span><br><span class="line">v6[<span class="number">21</span>] = <span class="number">69</span>;</span><br><span class="line">v6[<span class="number">22</span>] = <span class="number">98</span>;</span><br><span class="line">v6[<span class="number">23</span>] = <span class="number">69</span>;</span><br><span class="line">v6[<span class="number">24</span>] = <span class="number">115</span>;</span><br><span class="line">v6[<span class="number">25</span>] = <span class="number">29</span>;</span><br><span class="line">v6[<span class="number">26</span>] = <span class="number">-46</span>;</span><br><span class="line">v6[<span class="number">27</span>] = <span class="number">85</span>;</span><br></pre></td></tr></table></figure>

<p>qmemcpy和memcpy的作用相同，都是从第二个参数复制第三个参数个字符到第一个参数所代表的地址。在这里，就是将字符串qkdzfvVQ”（由于字符串内不能直接出现”，会与字符串的头和尾混淆，所以使用转义符\配上”来表面字符串中含有双引号）这个长度为9的字符串复制到v6，也就是数组的前9个元素。之后的一系列赋值为v6的第10到28个元素赋值。</p>
<p>顺带一提，对于数组，数组名代表这个数组的头的位置，数组名[i]代表取数组中第i+1个元素的值。数组中的第一个元素是数组名[0]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">v5 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>memset是memory set的缩写，和他的名字一样，他能够从内存中的某个位置开始，将之后的n个字节设置为指定值。在这里，他将Str数组的全部元素都设置为0。然后，程序将v5设置为0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input your flag:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%40s&quot;</span>, Str);</span><br></pre></td></tr></table></figure>

<p>printf打印了之后的信息，scanf前面的format代表其读入一个长度最长为40的字符串。之后的参数Str(正如之前所说，数组名代表了数组头的地址)代表了要读入到哪。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v10 = <span class="number">1</span>;</span><br><span class="line">v9 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>为v10和v9赋值捏。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">28</span> )</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p>if和它的字面意思相同，代表着”如果“，这里的strlen函数会读入一个字符串所在的地址，返回其长度。把这两个元素结合起来，这段代码的意思便是”如果Str字符串的长度为28则“。之后的’{‘代表着代码块的开始，直到和他对应的’}’出现前的内容都是条件成立后要执行的内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">27</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  Str[i] ^= v10 + v9;</span><br><span class="line">  v9 += v10;</span><br><span class="line">  v10 = v9 - v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环要求三个以;隔开的参数，第一个为初始化，在这里是将变量i的值初始化为0；第二个为循环条件，在这里为当i&lt;&#x3D;27时继续循环；第三个为每一轮循环结束后要执行的代码，在这里的++表示自增，在这里等价于i&#x3D;i+1。</p>
<p>所以在这个循环中，i的值由0一路递增至27，并在i&#x3D;27的循环结束后自增到28终止循环</p>
<p>之后的’{‘代表着一个代码块的起始，这个代码块是每一轮循环都要执行的。（代码块嵌套捏）</p>
<p>首先，^&#x3D;是一种简写，Str[i] ^&#x3D; v10 + v9也可以写成 Str[i] &#x3D; Str[i] ^ (v10 + v9)。^在c中代表着异或操作，这里便是将Str数组中的第i个元素与v10+v9的和进行异或并赋值回去。</p>
<p>之后的v9+&#x3D;v10;v10&#x3D;v9-v10便是对这两个变量所作的操作：先将v9加上v10的值并赋值给v9，再将v9-v10的值赋值给v10。两个变量在每次循环开始时的值如下表所示。</p>
<table>
<thead>
<tr>
<th>i</th>
<th>v9</th>
<th>v10</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>5</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>8</td>
<td>5</td>
</tr>
</tbody></table>
<p>看呐，斐波那契数列[狗头]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">27</span>; ++j )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> ( Str[j] != v6[j] )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="built_in">puts</span>(<span class="string">&quot;Your flag is wrong&quot;</span>);</span><br><span class="line">       system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;You&#x27;ve found the correct flag!&quot;</span>);</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>之后的for循环中初始化了一个变量j，j的值也是从0一路递增至27，并在28时退出循环。底下的if比较了Str数组和v6数组的每一个元素是否不相等(!&#x3D;符号代表不相等)，若不相等，就输出flag错误。system(“pause”);时一个用于暂停程序的函数，防止命令行一闪而过直接退出看不清输出。之后的return 0则是一个函数返回其返回值。在这里，就算代表着main函数终止并返回0。从这段逻辑可以看出，Str作操作后应该和v6一模一样，不然程序就会提示你输错了。</p>
<p>之后若循环顺利完成并因为j的值而终止，程序便会输出你的flag正确，然后暂停退出一条龙。</p>
<p>最后的一个’}’终止最开始那个if下的代码块，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The length of your flag is wrong&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还记得之前那个对长度进行判断的if不，这是他的else。对于一个if-else语句当条件不成立时，程序便会跳到else部分执行。很合理（确信）。如果没有else那就直接忽略if下条件成立的代码继续往后执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main函数的定义结束标记。和之前main后的那个’{‘相匹配。</p>
<h3 id="0b1所以要怎么写呢？"><a href="#0b1所以要怎么写呢？" class="headerlink" title="0b1所以要怎么写呢？"></a>0b1所以要怎么写呢？</h3><p>上面的程序逻辑总结起来就是一句话：读入一个字符串，若长度正确，在对字符串进行xor后判断其结果和v6是否相等。由于xor的对称性质，我们可以将v6进行同等的xor得到应该输入的字符串。因此可以考虑直接将代码复制出来，只把输入由Str改为v6。</p>
<p>脚本如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//printf函数定义</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">//memcpy函数定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> v6[<span class="number">36</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="type">char</span> v9=<span class="number">1</span>,v10=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="built_in">memcpy</span>(v6, <span class="string">&quot;qkdzfvVQ\&quot;&quot;</span>, <span class="number">9</span>);</span><br><span class="line">	v6[<span class="number">9</span>] = <span class="number">-24</span>;</span><br><span class="line">	v6[<span class="number">10</span>] = <span class="number">-39</span>;</span><br><span class="line">	v6[<span class="number">11</span>] = <span class="number">11</span>;</span><br><span class="line">	v6[<span class="number">12</span>] = <span class="number">61</span>;</span><br><span class="line">	v6[<span class="number">13</span>] = <span class="number">-22</span>;</span><br><span class="line">	v6[<span class="number">14</span>] = <span class="number">78</span>;</span><br><span class="line">	v6[<span class="number">15</span>] = <span class="number">71</span>;</span><br><span class="line">	v6[<span class="number">16</span>] = <span class="number">100</span>;</span><br><span class="line">	v6[<span class="number">17</span>] = <span class="number">3</span>;</span><br><span class="line">	v6[<span class="number">18</span>] = <span class="number">-74</span>;</span><br><span class="line">	v6[<span class="number">19</span>] = <span class="number">28</span>;</span><br><span class="line">	v6[<span class="number">20</span>] = <span class="number">-125</span>;</span><br><span class="line">	v6[<span class="number">21</span>] = <span class="number">69</span>;</span><br><span class="line">	v6[<span class="number">22</span>] = <span class="number">98</span>;</span><br><span class="line">	v6[<span class="number">23</span>] = <span class="number">69</span>;</span><br><span class="line">	v6[<span class="number">24</span>] = <span class="number">115</span>;</span><br><span class="line">	v6[<span class="number">25</span>] = <span class="number">29</span>;</span><br><span class="line">	v6[<span class="number">26</span>] = <span class="number">-46</span>;</span><br><span class="line">	v6[<span class="number">27</span>] = <span class="number">85</span>;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">27</span>; ++i ) &#123;</span><br><span class="line">		v6[i] ^= v10 + v9;</span><br><span class="line">		v9 += v10;</span><br><span class="line">		v10 = v9 - v10;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到flag: sharkctf{x0r_1s_1nt3rest1ng}</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
        <tag>SharkCTF2023</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>2023SharkCTF-week2-Reverse-wp</title>
    <url>/post/ae3462da.html</url>
    <content><![CDATA[<h1 id="2023SharkCTF-week2-Reverse-wp"><a href="#2023SharkCTF-week2-Reverse-wp" class="headerlink" title="2023SharkCTF-week2-Reverse-wp"></a>2023SharkCTF-week2-Reverse-wp</h1><p>2023.8.21 by Shen_Fan</p>
<hr>
<h2 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h2><p>基本阅读ida反汇编代码逻辑后可以发现该程序读入一个字符串，然后使用sub_4015DA对字符串进行处理并返回一个指针作为处理后的结果，再将处理后的结果与Str2比较并输出正误。</p>
<span id="more"></span>

<p>sub_4015DA由标志性的base64字母表ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;与Str2的形态可以确定为未换表的base64，考虑直接对Str2解密。</p>
<p>解密后得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sh@rkctf&#123;something_run_before_main!&#125;</span><br></pre></td></tr></table></figure>

<p>并且输入程序时显示flag错误，鉴定为假flag。</p>
<p>对Str2查找交叉引用发现一个函数对Str2进行了赋值，猜测该函数在main前运行，对该函数中的赋值进行base64解密得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;N3w_Bln7_l3_S0_us3fv1_iN_Pr07r@mlng&#125;</span><br></pre></td></tr></table></figure>

<p>获得flag。</p>
<h2 id="a-cup-of-tea"><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h2><p>分析ida返回表代码逻辑后发现程序读入一个字符串，并在判断长度是否为23后将其与一个局部变量数组一起传入一个encrypt函数，然后将Str数组的前16个字节与res数组比较后输出正误</p>
<p>（为啥23字节的数组最后只比对了前16个字节呢，因为有人出题出傻了，给各位师傅磕头了）</p>
<p>对encrypt函数进行简单逆向后得到解密函数（也可以直接照抄ctf-wiki上tea加密的解密函数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v4=<span class="number">0</span>;</span><br><span class="line">    v4 -= <span class="number">0x20</span>*<span class="number">1640531527</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v5 = a1[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6 = *a1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">0x1f</span>;++i) &#123;</span><br><span class="line">        v5-=(v6 + v4) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v6) ^ ((v6 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">3</span>]);</span><br><span class="line">        v6-=(v5 + v4) ^ (*a2 + <span class="number">16</span> * v5) ^ ((v5 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">1</span>]);</span><br><span class="line">        v4+=<span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *a1=v6;</span><br><span class="line">    a1[<span class="number">1</span>]=v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密后得到flag</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i7_IS_JuSt_4_CUP</span><br></pre></td></tr></table></figure>

<p>结合hint得到最终flag</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;i7_IS_JuSt_4_CUP_Of_7e4&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ez-maze"><a href="#ez-maze" class="headerlink" title="ez_maze"></a>ez_maze</h2><p>分析逻辑后得知该迷宫由数字0123操作，否则会报出”invalid move”退出，对应的操作下的变量v5猜测为当前位置。0对应+1，向右；1对应-1，向左；2对应-6，猜测为向上；3对应+6，猜测为向下。那么迷宫的列数应该为6，这样+6或-6可以在行之间移动。 当v5&#x3D;5时循环退出，猜测位置5为终点。迷宫的逻辑为将当前位置与0x2a异或，若异或结果为0，则输出hit the wall并退出。最终退出循环时若位置为5且无多余步骤，就输出flag。</p>
<p>考虑直接拷贝迷宫手动走，墙为0x2a，将进行与0x2a异或的数组byte_403020提取得：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>稍微排版一下让列数为6</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以观察到唯一道路的迷宫，手动走出flag:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;<span class="number">003313300022220</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hungry-Snake"><a href="#Hungry-Snake" class="headerlink" title="Hungry_Snake"></a>Hungry_Snake</h2><p>本周的压轴题，由于第二周的签到题离奇消失临时整的。</p>
<p>本题的难度主要在于在屎山一般的代码中寻找flag加密的主逻辑并写脚本恢复，</p>
<p>题目给出了结构体信息，先找教程在ida中恢复结构体（你也不想盯着一堆偏移硬看吧）</p>
<p>对于较为复杂的题目，我们一般从flag的输入和输出下手，追踪flag去了哪里并分析其逻辑，这里从输入入手。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%60s&quot;</span>, Str);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">45</span> )</span><br></pre></td></tr></table></figure>

<p>首先flag被scanf读入至数组Str，然后对Str进行了长度判断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gameInit(Str);</span><br></pre></td></tr></table></figure>

<p>下一次也是最后一次出现时是在游戏初始化过程，由于Str为局部变量一般不会被其他函数访问，可以考虑Str通过游戏初始化被完全转移了。</p>
<p>进入gameInit函数并只关注与他参数有关的代码部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(&amp;game.in[game.total], <span class="number">0</span>, <span class="number">0x30</span>ui64);</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;game.in[game.total], a1);</span><br></pre></td></tr></table></figure>

<p>结合上文</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">game.width = <span class="number">16</span>;</span><br><span class="line">game.height = <span class="number">16</span>;</span><br><span class="line">game.total = game.height * game.width;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">game.in = (<span class="type">char</span> *)<span class="built_in">malloc</span>(game.total + <span class="number">48</span>i64);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">memset</span>(game.in, <span class="number">46</span>, game.total);</span><br></pre></td></tr></table></figure>

<p>得知game.in为新分配的一块大小为地图大小+48字节的内存，而game.in前game.total字节被设置为’.’，猜测为存储地图，之后的48字节由上面的strcpy(&amp;game.in[game.total], a1);猜测为存储输入的flag。</p>
<p>之后线索断了，但我们知道应该去game.in偏移为game.total的地方找我们的输入</p>
<p>查看游戏主循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">scanKey();</span><br><span class="line">v6 = moveSnake();</span><br><span class="line"><span class="keyword">if</span> ( v6 == <span class="number">-1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  SetConsoleActiveScreenBuffer(game.hOutPut);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You lose!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">printMap();</span><br><span class="line">delay((<span class="type">unsigned</span> <span class="type">int</span>)game.delay_time);</span><br></pre></td></tr></table></figure>

<p>scanKey经查看发现只获取输入并按一定规则改变蛇的方向。printMap仅仅是将game.in的前game.total字节输出，故排除。</p>
<p>moveSnake函数中没有直接使用game.in中的game.total以后的部分，但是在贪吃蛇所处位置值为’*’后，该函数会调用一个updateMap函数，进入后发现该函数即为对game.in的game.total偏移进行加密的函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">updateMap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> delay_time; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> total; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = &amp;game.in[game.total];</span><br><span class="line">  delay_time = game.delay_time;</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)game.total;</span><br><span class="line">  total = game.total;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = *((_DWORD *)v5 + <span class="number">1</span>);</span><br><span class="line">    v4 = ((v3 + ((v3 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v3))) ^ delay_time) + *(_DWORD *)v5;</span><br><span class="line">    *(_DWORD *)v5 = v4;</span><br><span class="line">    result = (<span class="type">unsigned</span> __int64)(v5 + <span class="number">4</span>);</span><br><span class="line">    *((_DWORD *)v5 + <span class="number">1</span>) = ((v4 + ((v4 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v4))) ^ (total - <span class="number">1640531527</span>)) + v3;</span><br><span class="line">    v5 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到加密过程中的部分密钥来自于game结构体的一些内容，需要注意。</p>
<p>除此以外没有其他部分再使用game.total以后的内容，故猜测flag仅进行了这一次加密。</p>
<p>游戏胜利结束后，main会调用一个checkFlag函数对game.in的game.total偏移后的内容与一个数组aetx进行比较并返回结果，故猜测aetx为flag加密后的结果。</p>
<p>回看加密，该加密每次吃到东西都会调用一次，结合胜利条件game.snake.len&#x3D;game.total可知总调用次数为255次(初始长度为1)，同时加密过程中所使用的delay_time初始值为190，之后递减10至50便不会变化。针对以上特征编写解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> aetx_[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xDB</span>, <span class="number">0x3A</span>, <span class="number">0x03</span>, <span class="number">0x2A</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x8C</span>, <span class="number">0xBF</span>, <span class="number">0xA0</span>, </span><br><span class="line">  <span class="number">0x49</span>, <span class="number">0x11</span>, <span class="number">0xD6</span>, <span class="number">0x4D</span>, <span class="number">0xD3</span>, <span class="number">0x73</span>, <span class="number">0x37</span>, <span class="number">0x48</span>, <span class="number">0xD8</span>, <span class="number">0x6C</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x91</span>, <span class="number">0xB6</span>, <span class="number">0x0D</span>, <span class="number">0x88</span>, <span class="number">0x1B</span>, <span class="number">0x0E</span>, <span class="number">0x85</span>, <span class="number">0x1E</span>, <span class="number">0xA4</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x59</span>, <span class="number">0xF1</span>, <span class="number">0x64</span>, <span class="number">0xE8</span>, <span class="number">0x03</span>, <span class="number">0xD8</span>, <span class="number">0xF3</span>, <span class="number">0x4F</span>, <span class="number">0xE5</span>, </span><br><span class="line">  <span class="number">0x9E</span>, <span class="number">0x34</span>, <span class="number">0xFA</span>, <span class="number">0x44</span>, <span class="number">0xA6</span>, <span class="number">0xDF</span>, <span class="number">0xDC</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* aetx = (<span class="type">unsigned</span> <span class="type">int</span>*)aetx_;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">255</span>;i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span>* v5 = aetx + <span class="number">12</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> delay_time = i&lt;<span class="number">240</span>?<span class="number">50</span>:<span class="number">50</span>+(i<span class="number">-240</span>)*<span class="number">10</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> total = <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">5</span>;j++) &#123;</span><br><span class="line">            v5-=<span class="number">2</span>;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> v4 = *v5;</span><br><span class="line">            v5[<span class="number">1</span>] -= ((v4 + ((v4 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v4))) ^ (total - <span class="number">1640531527</span>));</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> v3 = v5[<span class="number">1</span>];</span><br><span class="line">            *v5-=((v3 + ((v3 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v3))) ^ delay_time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>((<span class="type">char</span>*)aetx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到最终flag:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;WoW_yOU_arE_pl4y1NG_Sn@kE_5o_w3ll!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
        <tag>SharkCTF2023</tag>
      </tags>
  </entry>
  <entry>
    <title>2023SharkCTF-week3-Reverse-wp</title>
    <url>/post/35912eb5.html</url>
    <content><![CDATA[<h1 id="2023SharkCTF-week3-Reverse-wp"><a href="#2023SharkCTF-week3-Reverse-wp" class="headerlink" title="2023SharkCTF-week3-Reverse-wp"></a>2023SharkCTF-week3-Reverse-wp</h1><p>2023.9.16 by Shen_Fan</p>
<hr>
<p>第三周的题大多是烂活，还请各位佬轻喷</p>
<h2 id="Encrypted-Code"><a href="#Encrypted-Code" class="headerlink" title="Encrypted_Code"></a>Encrypted_Code</h2><p>运行后是个平平无奇的flag检查程序，扔ida里看一眼</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_401A20(argc, argv, envp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;flag: &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%60s&quot;</span>, v4);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))loc_401550)(v4);</span><br><span class="line">  <span class="keyword">if</span> ( unk_408970 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到程序读入一个字符串到v4,然后将v4作为loc_401550的参数进行函数调用，再根据unk_408970的值进行判断。</p>
<p>对unk_408970进行交叉引用查询发现无其他引用，且loc_401550处是依托乱码，代码可能被加密。使用ida进行动态调试得到loc_401550解密后的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_401550</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// r11</span></span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">48</span>]; <span class="comment">// [rsp-68h] [rbp-78h] BYREF</span></span><br><span class="line">  _BYTE v4[<span class="number">23</span>]; <span class="comment">// [rsp-38h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp-14h] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp-10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp-Ch] [rbp-1Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v8 = v1;</span><br><span class="line">  v7 = <span class="number">-559038737</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)(<span class="number">4</span>i64 * i + a1) ^= v7;</span><br><span class="line">    v7 = *(_DWORD *)(<span class="number">4</span>i64 * i + a1);</span><br><span class="line">    <span class="keyword">if</span> ( v7 != dword_404020[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      result = dword_408970;</span><br><span class="line">      dword_408970[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">52</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = dword_408970;</span><br><span class="line">    dword_408970[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_408970[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    qmemcpy(v3, <span class="string">&quot;)/873..?&gt;z&lt;6;=z&lt;5(7;.`z!#5/(z34*/.&#x27;&quot;</span>, <span class="number">35</span>);</span><br><span class="line">    v3[<span class="number">35</span>] = <span class="number">5</span>;</span><br><span class="line">    v3[<span class="number">36</span>] = <span class="number">33</span>;</span><br><span class="line">    v3[<span class="number">37</span>] = <span class="number">60</span>;</span><br><span class="line">    v3[<span class="number">38</span>] = <span class="number">51</span>;</span><br><span class="line">    v3[<span class="number">39</span>] = <span class="number">40</span>;</span><br><span class="line">    v3[<span class="number">40</span>] = <span class="number">41</span>;</span><br><span class="line">    v3[<span class="number">41</span>] = <span class="number">46</span>;</span><br><span class="line">    v3[<span class="number">42</span>] = <span class="number">122</span>;</span><br><span class="line">    v3[<span class="number">43</span>] = <span class="number">110</span>;</span><br><span class="line">    v3[<span class="number">44</span>] = <span class="number">24</span>;</span><br><span class="line">    v3[<span class="number">45</span>] = <span class="number">3</span>;</span><br><span class="line">    v3[<span class="number">46</span>] = <span class="number">14</span>;</span><br><span class="line">    v3[<span class="number">47</span>] = <span class="number">31</span>;</span><br><span class="line">    qmemcpy(v4, <span class="string">&quot;z\&quot;5(z2?\&quot;z4/78?(&#x27;zqzx&#x27;xP&quot;</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (_DWORD *)<span class="built_in">strlen</span>(v3);</span><br><span class="line">      <span class="keyword">if</span> ( j &gt;= (<span class="type">unsigned</span> __int64)result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">putchar</span>(v3[j] ^ <span class="number">0x5A</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的异或，编写脚本如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dword_404020[<span class="number">16</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">-1395861860</span>,</span><br><span class="line">  <span class="number">-893864457</span>,</span><br><span class="line">  <span class="number">-1879193972</span>,</span><br><span class="line">  <span class="number">-693979679</span>,</span><br><span class="line">  <span class="number">-1644306258</span>,</span><br><span class="line">  <span class="number">-1031098400</span>,</span><br><span class="line">  <span class="number">-1646403416</span>,</span><br><span class="line">  <span class="number">-108875873</span>,</span><br><span class="line">  <span class="number">-1091069990</span>,</span><br><span class="line">  <span class="number">-1883249787</span>,</span><br><span class="line">  <span class="number">-571491167</span>,</span><br><span class="line">  <span class="number">-375522354</span>,</span><br><span class="line">  <span class="number">-927162717</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">12</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dword_404020[i] ^= dword_404020[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dword_404020[<span class="number">0</span>] ^= <span class="number">-559038737</span>;</span><br><span class="line">    <span class="built_in">puts</span>((<span class="type">char</span> *)dword_404020);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> v3[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(v3, <span class="string">&quot;)/873..?&gt;z&lt;6;=z&lt;5(7;.`z!#5/(z34*/.&#x27;&quot;</span>, <span class="number">35</span>);</span><br><span class="line">    v3[<span class="number">35</span>] = <span class="number">5</span>;</span><br><span class="line">    v3[<span class="number">36</span>] = <span class="number">33</span>;</span><br><span class="line">    v3[<span class="number">37</span>] = <span class="number">60</span>;</span><br><span class="line">    v3[<span class="number">38</span>] = <span class="number">51</span>;</span><br><span class="line">    v3[<span class="number">39</span>] = <span class="number">40</span>;</span><br><span class="line">    v3[<span class="number">40</span>] = <span class="number">41</span>;</span><br><span class="line">    v3[<span class="number">41</span>] = <span class="number">46</span>;</span><br><span class="line">    v3[<span class="number">42</span>] = <span class="number">122</span>;</span><br><span class="line">    v3[<span class="number">43</span>] = <span class="number">110</span>;</span><br><span class="line">    v3[<span class="number">44</span>] = <span class="number">24</span>;</span><br><span class="line">    v3[<span class="number">45</span>] = <span class="number">3</span>;</span><br><span class="line">    v3[<span class="number">46</span>] = <span class="number">14</span>;</span><br><span class="line">    v3[<span class="number">47</span>] = <span class="number">31</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(v3+<span class="number">48</span>, <span class="string">&quot;z\&quot;5(z2?\&quot;z4/78?(&#x27;zqzx&#x27;xP&quot;</span>, <span class="number">25</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">73</span>; i++) &#123;</span><br><span class="line">        v3[i] ^= <span class="number">0x5A</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v3[<span class="number">73</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;sEEms_YOU_KNOw_HOW_7O_dE8uG_tH1$_PRoGr4me!!</span><br><span class="line">submitted flag format: &#123;your input&#125;_&#123;first <span class="number">4B</span>YTE xor hex number&#125; + <span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>拼接得到最终flag:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;sEEms_YOU_KNOw_HOW_7O_dE8uG_tH1$_PRoGr4me!!_0xdeadbeaf&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Bomb-Plus"><a href="#Find-Bomb-Plus" class="headerlink" title="Find_Bomb_Plus"></a>Find_Bomb_Plus</h2><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>直接扫雷得到flag（有一定概率可以不猜直接扫出）</p>
<h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>通过动态调试直接找到雷的位置然后解出</p>
<h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><p>通过ida进行patch更改地图大小为1*21，一发入魂</p>
<p>flag就交给你们自己去找了</p>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>扔到die里一看，upx，还被modified了，手动脱一手壳</p>
<p>这里使用的工具是x64dbg</p>
<p>F9越过库函数后来到这里</p>
<p><img src="/../images/shell_1.png" alt="shell_1"></p>
<p>根据esp定理，在这里某一次push后在内存对应位置下硬件断点</p>
<p><img src="/../images/shell_2.png" alt="shell_2"></p>
<p><img src="/../images/shell_3.png" alt="shell_3"></p>
<p>然后F9开始运行直到断点被触发</p>
<p><img src="/../images/shell_4.png" alt="shell_4"></p>
<p>待pop完成后使用插件Scylla进行dump</p>
<p><img src="/../images/shell_5.png" alt="shell_5"></p>
<p>将dump后的程序丢入ida后根据字符串”flag:”找到main函数</p>
<p>对逻辑分析后鉴定为rc4，编写脚本解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> key[] =&#123;<span class="string">&quot;I_am_the_key_of_flag&quot;</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xB0</span>, <span class="number">0xD2</span>, <span class="number">0x49</span>, <span class="number">0x3F</span>, <span class="number">0x5C</span>, <span class="number">0xEE</span>, <span class="number">0x55</span>, <span class="number">0xB2</span>, <span class="number">0x5B</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0xEA</span>, <span class="number">0x41</span>, <span class="number">0x11</span>, <span class="number">0x86</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x12</span>, <span class="number">0xE9</span>, <span class="number">0xCF</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x79</span>, <span class="number">0x46</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Len=<span class="built_in">strlen</span>(key);</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> k[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Data, <span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++) &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    rc4_init();</span><br><span class="line">    rc4_crypt(ida_chars, <span class="number">28</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ida_chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到flag:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sharkctf&#123;upX_@Nd_RC4_15_fuN&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Star-Rail"><a href="#Star-Rail" class="headerlink" title="Star_Rail"></a>Star_Rail</h2><p>如果说扫雷还能扫出来，那么这个是真抽不出来了（悲</p>
<p>使用ida64打开，虽然能找到输出flag的函数，但函数被加花了ida无法直接分析。</p>
<p>根据平时的经验，对随机数判断部分进行patch来逆天改命</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = rand();</span><br><span class="line">      <span class="keyword">if</span> ( v4 % <span class="number">100</span> &gt; <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 % <span class="number">100</span> &gt; <span class="number">17</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(&amp;byte_405153);</span><br><span class="line">          ++v11;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(&amp;byte_40514D);</span><br><span class="line">          ++v12;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(&amp;Format);</span><br><span class="line">        ++dword_408030;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( i == <span class="number">4</span> || i == <span class="number">9</span> )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到若v4为0或1，即可输出金光，直接根据汇编将此判断改为100</p>
<p>以下是详细过程：</p>
<p><img src="/../images/st_1.png" alt="st_1"></p>
<p><img src="/../images/st_2.png" alt="st_2"></p>
<p><img src="/../images/st_3.png" alt="st_3"></p>
<p><img src="/../images/st_4.png" alt="st_4"></p>
<p><img src="/../images/st_5.png" alt="st_5"></p>
<p><img src="/../images/st_6.png" alt="st_6"></p>
<p>然后在ida中Edit-&gt;Patch programe-&gt;Apply patched to…将patch覆盖到原程序文件</p>
<p>运行一键得到flag </p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
        <tag>SharkCTF2023</tag>
      </tags>
  </entry>
  <entry>
    <title>MiniL-Reverse部分题解</title>
    <url>/post/903a36fa.html</url>
    <content><![CDATA[<h1 id="MiniL-Reverse-部分题解"><a href="#MiniL-Reverse-部分题解" class="headerlink" title="MiniL-Reverse 部分题解"></a>MiniL-Reverse 部分题解</h1><p>总体而言题目不错，就是后面的混淆写着感觉和吃屎一样（</p>
<h2 id="bigbanana"><a href="#bigbanana" class="headerlink" title="bigbanana"></a>bigbanana</h2><p>52MB 的附件里有 53MB 的 bigbanana 视频，我很难评（<br>打开一看一个巨大 switch，鉴定为 vm，拷 opcode 出来后一个一个看是什么功能<br>特别注意 opcode 是在 -1 后进入 switch 进行运行的</p>
<span id="more"></span>

<p>功能表如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0   add v8 $0</span><br><span class="line">15  push getchar()</span><br><span class="line">16  print %c v7</span><br><span class="line">239 v7 = v8</span><br><span class="line">240 v10 = v8</span><br><span class="line">241 cmp v7 $0</span><br><span class="line">242 xor v7 v8</span><br><span class="line">243 add v7 $0</span><br><span class="line">244 sub $0 $1</span><br><span class="line">245 push $0</span><br><span class="line">246 pop v7</span><br><span class="line">247 pop v8</span><br><span class="line">248 pop v9</span><br><span class="line">249 pop v10</span><br><span class="line">253 !eq 大香蕉启动！</span><br><span class="line">254 jeq $0 + 2</span><br></pre></td></tr></table></figure>

<p>然后根据此功能表写出汇编器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *pc = instruc;</span><br><span class="line">    <span class="type">int</span> v7, v8, v9, v10, eq;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line">    NEXT:</span><br><span class="line">    <span class="keyword">while</span> (*pc) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (*pc<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v8 += %d;\n&quot;</span>, *(pc + <span class="number">1</span>));</span><br><span class="line">            pc += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;stack.push(getchar());&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;printf(\&quot;%c\&quot;, v7);&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">239</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v7 = v8;&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">240</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v10 = v8;&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">241</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;eq = v7 == %d;\n&quot;</span>, *(pc + <span class="number">1</span>));</span><br><span class="line">            pc += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">242</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v7 ^= v8;&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">243</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v7 += %d;\n&quot;</span>, *(pc + <span class="number">1</span>));</span><br><span class="line">            pc += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">244</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*(pc + 1) -= %d;\n&quot;</span>, *(pc + <span class="number">2</span>));</span><br><span class="line">            *(pc + <span class="number">1</span>) -= *(pc + <span class="number">2</span>);</span><br><span class="line">            pc += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">245</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack.push(%d);\n&quot;</span>, *(pc + <span class="number">1</span>));</span><br><span class="line">            pc += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">246</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v7 = stack.top();&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;stack.pop();&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">247</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v8 = stack.top();&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;stack.pop();&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">248</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v9 = stack.top();&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;stack.pop();&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">249</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;v10 = stack.top();&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;stack.pop();&quot;</span>);</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">253</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;if(!eq)printf(\&quot;wrong\&quot;);&quot;</span>);</span><br><span class="line">            pc+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">254</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;if (eq) &#123;&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;    pc += %d;\n&quot;</span>, *(pc + <span class="number">1</span>) + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            pc += *(pc + <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">goto</span> NEXT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到 vm 使用的汇编代码，实在是太长了就不放了<br>之后可以发现后续比对的一些特征</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack.<span class="built_in">push</span>(<span class="built_in">getchar</span>());</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="built_in">getchar</span>());</span><br><span class="line">v8 = stack.<span class="built_in">top</span>();</span><br><span class="line">stack.<span class="built_in">pop</span>();</span><br><span class="line">v7 = stack.<span class="built_in">top</span>();</span><br><span class="line">stack.<span class="built_in">pop</span>();</span><br><span class="line">v7 += <span class="number">1766746445</span>;</span><br><span class="line">v8 += <span class="number">1952656716</span>;</span><br><span class="line">v7 += <span class="number">0</span>;</span><br><span class="line">v7 ^= v8;</span><br><span class="line">eq = v7 == <span class="number">489505807</span>;</span><br><span class="line"><span class="keyword">if</span>(!eq)<span class="built_in">printf</span>(<span class="string">&quot;wrong&quot;</span>);</span><br><span class="line">v7 = v8;</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="built_in">getchar</span>());</span><br><span class="line">v8 = stack.<span class="built_in">top</span>();</span><br><span class="line">stack.<span class="built_in">pop</span>();</span><br><span class="line">v7 += <span class="number">22</span>;</span><br><span class="line">v8 += <span class="number">33</span>;</span><br><span class="line">v7 += <span class="number">1131796</span>;</span><br><span class="line">v7 ^= v8;</span><br><span class="line">eq = v7 == <span class="number">1953788496</span>;</span><br><span class="line"><span class="keyword">if</span>(!eq)<span class="built_in">printf</span>(<span class="string">&quot;wrong&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>先行读入 2 字符，加上某数字后异或后比对，之后就是读一个字符，简单加法，然后异或比较，只需要爆破一开始的 2 字符，之后的数据也可以爆破得到（其实是可以直接异或算出来的，但是懒得去想了，反正能爆）。数据提取问题，不难发现这些使用立即数以 4 个为一组，在汇编器针对此特征只在 opcode-1 为{0, 241, 243}时打印数字，即可提出其中用于爆破的数据。爆破脚本如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> v7, v8;</span><br><span class="line">    v7 = <span class="number">1766746445</span>;</span><br><span class="line">    v8 = <span class="number">1952656716</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; start_v7;</span><br><span class="line">    queue&lt;<span class="type">char</span>&gt; start;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">33</span>; i &lt; <span class="number">127</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">33</span>; j &lt; <span class="number">127</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((i + v7) ^ (j + v8)) == <span class="number">489505807</span>) &#123;</span><br><span class="line">                start_v7.<span class="built_in">push</span>(v8 + j);</span><br><span class="line">                start.<span class="built_in">push</span>(i);</span><br><span class="line">                start.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!start_v7.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        v7 = start_v7.<span class="built_in">front</span>();</span><br><span class="line">        start_v7.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">char</span> a = start.<span class="built_in">front</span>();</span><br><span class="line">        start.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">char</span> b = start.<span class="built_in">front</span>();</span><br><span class="line">        start.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> *curr = mem; <span class="comment">// mem 为提取出的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (*curr) &#123;</span><br><span class="line">            v7 += curr[<span class="number">0</span>];</span><br><span class="line">            v8 = curr[<span class="number">1</span>];</span><br><span class="line">            v7 += curr[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">33</span>; i &lt; <span class="number">127</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((v7 ^ (v8 + i)) == curr[<span class="number">3</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, a, b);</span><br><span class="line">                        first = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">                    v7 = v8 + i;</span><br><span class="line">                    <span class="keyword">goto</span> FIND;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; Not Found\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            FIND:</span><br><span class="line">            curr += <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(*curr)) &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到最终 flag<br>不管怎么说还是很标准的 vm 题</p>
<h2 id="longlongcall"><a href="#longlongcall" class="headerlink" title="longlongcall"></a>longlongcall</h2><p>一吨的 call 混淆，使我的 ida 去世<br><img src="/../images/minil-longlongcall1.png" alt="minil-longlongcall1"><br>观察后不难发现这群 call 混淆机器码全都是 E8 02 00 00 00 C9 C3，编写 idapython 脚本去了<br>顺便把那些没啥用的 pushfq 和 popfq 去了<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pattern_nop</span>(<span class="params">start_addr, end_addr, pattern</span>):</span><br><span class="line">    cur_addr = start_addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> cur_addr &lt; end_addr:</span><br><span class="line">        cur_addr = idc.find_binary(cur_addr, SEARCH_DOWN, pattern)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;patch addr: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(cur_addr)))</span><br><span class="line">        <span class="keyword">if</span> cur_addr == idc.BADADDR:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            my_nop(cur_addr, cur_addr + pattern.count(<span class="string">&quot; &quot;</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&quot;E8 02 00 00 00 C9 C3&quot;</span></span><br><span class="line">cur_addr = <span class="number">0x11D9</span></span><br><span class="line">end_addr = <span class="number">0x1E35</span></span><br><span class="line">pattern_nop(cur_addr, end_addr, pattern)</span><br><span class="line">pattern = <span class="string">&quot;48 83 C4 08 9D&quot;</span></span><br><span class="line">pattern_nop(cur_addr, end_addr, pattern)</span><br><span class="line">pattern = <span class="string">&quot;9C 90 90&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 apply patch 后重新让 ida 分析（不然要 undefine 一堆函数，懒懒懒懒懒）<br>发现是一个异常简答的异或，直接写脚本解了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> enc[<span class="number">44</span>] = &#123;</span><br><span class="line">    <span class="number">-69</span>, <span class="number">-65</span>, <span class="number">-71</span>, <span class="number">-66</span>, <span class="number">-61</span>, <span class="number">-52</span>, <span class="number">-50</span>, <span class="number">-36</span>, </span><br><span class="line">    <span class="number">-98</span>, <span class="number">-113</span>, <span class="number">-99</span>, <span class="number">-101</span>, <span class="number">-89</span>, <span class="number">-116</span>, <span class="number">-41</span>, <span class="number">-107</span>, </span><br><span class="line">    <span class="number">-80</span>, <span class="number">-83</span>, <span class="number">-67</span>, <span class="number">-76</span>, <span class="number">-120</span>, <span class="number">-81</span>, <span class="number">-110</span>, <span class="number">-48</span>, </span><br><span class="line">    <span class="number">-49</span>, <span class="number">-95</span>, <span class="number">-93</span>, <span class="number">-110</span>, <span class="number">-73</span>, <span class="number">-76</span>, <span class="number">-55</span>, <span class="number">-98</span>, </span><br><span class="line">    <span class="number">-108</span>, <span class="number">-89</span>, <span class="number">-82</span>, <span class="number">-16</span>, <span class="number">-95</span>, <span class="number">-103</span>, <span class="number">-64</span>, <span class="number">-29</span>, </span><br><span class="line">    <span class="number">-76</span>, <span class="number">-76</span>, <span class="number">-65</span>, <span class="number">-29</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">43</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> a = <span class="number">33</span>; a &lt; <span class="number">127</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> b = <span class="number">33</span>; b &lt; <span class="number">127</span>; b++) &#123;</span><br><span class="line">                <span class="type">char</span> v2 = a + b;</span><br><span class="line">                <span class="keyword">if</span> ((enc[i] ^ v2) == a &amp;&amp; (enc[i + <span class="number">1</span>] ^ v2) == b) &#123;</span><br><span class="line">                    cout &lt;&lt; a &lt;&lt; b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到 flag</p>
<h2 id="myrust"><a href="#myrust" class="headerlink" title="myrust"></a>myrust</h2><p>rust+安卓，狠狠地踩在我的雷点上<br>安卓用 jadx 打开一看一个就调用了一个 invokeCheck 检查输入的 flag，但是还 loadLibrary(“myrust”)，直接解压 apk 拿到 myrust.so<br>从字符串表里找到 so 中对应的函数名并找到对应函数。在 mz1 师傅的帮助下发现他加载了 CryptoClass 类，遂回到安卓源代码中，果然找到这个类<br>里面就是简单 AES 比较后返回结果，但是 AES 直接解码后是乱码不是 flag<br>mz1 师傅直接使用调试机 hook 找到了 AES 的 key 与输入进行的一次倒序凯撒，byebye 大爹<br>实际上在 rust 中也能找到着这两部分（事后诸葛亮)</p>
<p><img src="/../images/minil-myrust.png" alt="minil-myrust"></p>
<p>由于传入类的是一个字符串数组，可以通过 rust 中调用的构造字符串与给数组赋值确定相关逻辑位置。第一个箭头是将字符串” oa0-eikddi1@ecsa “载入，第二、三个箭头指向的函数大致是将字符串反转后给字符串中的每个字符+1。因此 AES 的 key 应该是上面的字符串反转后每个字符 -1 即”btdfA2jeeljf.1bp”，之后 CryptoClass 类中的数据拿出来按这个密钥解密后，再反转每个字符-1即可获取 flag。</p>
<h2 id="olessvm"><a href="#olessvm" class="headerlink" title="olessvm"></a>olessvm</h2><p>满地都是混淆，mz1大爹在经过不懈地动态调试后成功找到了主要的加密逻辑部分，之后靠动态调试直接提出数组的数值<br><img src="/../images/minil-olessvm1.png" alt="minil-olessvm1"><br>解密得到 flag<br>脚本如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xFC</span>, <span class="number">0xF1</span>, <span class="number">0x2D</span>, <span class="number">0x11</span>, <span class="number">0x31</span>, <span class="number">0xC7</span>, <span class="number">0x19</span>, <span class="number">0x8A</span>, <span class="number">0xDA</span>, <span class="number">0xBC</span>, </span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x7C</span>, <span class="number">0x98</span>, <span class="number">0xEA</span>, <span class="number">0xDB</span>, <span class="number">0x65</span>, <span class="number">0xF7</span>, <span class="number">0x29</span>, <span class="number">0xD0</span>, <span class="number">0x43</span>, </span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0xFC</span>, <span class="number">0x84</span>, <span class="number">0x28</span>, <span class="number">0xF9</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAC</span>, <span class="number">0x59</span>, <span class="number">0xCD</span>, </span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0xE0</span>, <span class="number">0xC2</span>, <span class="number">0xB8</span>, <span class="number">0xF7</span>, <span class="number">0x59</span>, <span class="number">0x0C</span>, <span class="number">0x4B</span>, <span class="number">0xE6</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0x59</span>, <span class="number">0xCC</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x8C</span>, <span class="number">0xDA</span>, <span class="number">0x7B</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0xA4</span>, <span class="number">0x06</span>, <span class="number">0xBB</span>, <span class="number">0x86</span>, <span class="number">0xD0</span>, <span class="number">0x83</span>, <span class="number">0xD1</span>, <span class="number">0xFD</span>, <span class="number">0xE9</span>, </span><br><span class="line">  <span class="number">0x8B</span>, <span class="number">0x35</span>, <span class="number">0x45</span>, <span class="number">0x5D</span>, <span class="number">0x51</span>, <span class="number">0x4C</span>, <span class="number">0xD1</span>, <span class="number">0x72</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x9E</span>, <span class="number">0xE2</span>, <span class="number">0xB7</span>, <span class="number">0x2D</span>, <span class="number">0x75</span>, <span class="number">0x25</span>, <span class="number">0x71</span>, <span class="number">0x2B</span>, <span class="number">0x4B</span>, </span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0x45</span>, <span class="number">0x87</span>, <span class="number">0xA1</span>, <span class="number">0xC9</span>, <span class="number">0x47</span>, <span class="number">0xC5</span>, <span class="number">0x5A</span>, <span class="number">0x16</span>, <span class="number">0x5E</span>, </span><br><span class="line">  <span class="number">0x1A</span>, <span class="number">0xD1</span>, <span class="number">0x17</span>, <span class="number">0x9D</span>, <span class="number">0x18</span>, <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xD2</span>, <span class="number">0x75</span>, <span class="number">0xE9</span>, </span><br><span class="line">  <span class="number">0xE3</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0xC2</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x6D</span>, <span class="number">0x1A</span>, <span class="number">0x50</span>, <span class="number">0x65</span>, </span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0xFD</span>, <span class="number">0xA9</span>, <span class="number">0x12</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x99</span>, <span class="number">0x41</span>, <span class="number">0x7B</span>, <span class="number">0x79</span>, <span class="number">0x81</span>, <span class="number">0x4B</span>, <span class="number">0xCB</span>, <span class="number">0xA9</span>, <span class="number">0xEC</span>, </span><br><span class="line">  <span class="number">0x2E</span>, <span class="number">0x02</span>, <span class="number">0xCB</span>, <span class="number">0x94</span>, <span class="number">0xE5</span>, <span class="number">0x26</span>, <span class="number">0x91</span>, <span class="number">0x0B</span>, <span class="number">0xA6</span>, <span class="number">0x0F</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x81</span>, <span class="number">0xA1</span>, <span class="number">0x60</span>, <span class="number">0xD1</span>, <span class="number">0x52</span>, <span class="number">0x5F</span>, <span class="number">0xC4</span>, <span class="number">0x7A</span>, <span class="number">0xAD</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0xFF</span>, <span class="number">0xE2</span>, <span class="number">0x99</span>, <span class="number">0xD5</span>, <span class="number">0x7A</span>, <span class="number">0x28</span>, <span class="number">0x6E</span>, <span class="number">0xC0</span>, <span class="number">0x37</span>, </span><br><span class="line">  <span class="number">0xF5</span>, <span class="number">0x70</span>, <span class="number">0xE6</span>, <span class="number">0x46</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0xA2</span>, <span class="number">0xF5</span>, <span class="number">0x4B</span>, <span class="number">0x39</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x32</span>, <span class="number">0x8E</span>, <span class="number">0xB0</span>, <span class="number">0xE7</span>, <span class="number">0xBB</span>, <span class="number">0xE8</span>, <span class="number">0xC7</span>, <span class="number">0xD2</span>, </span><br><span class="line">  <span class="number">0xB7</span>, <span class="number">0x08</span>, <span class="number">0x7B</span>, <span class="number">0x62</span>, <span class="number">0x10</span>, <span class="number">0x3C</span>, <span class="number">0x56</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0x69</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0xF4</span>, <span class="number">0x06</span>, <span class="number">0x63</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0xFB</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>, <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5B</span>, <span class="number">0xA7</span>, </span><br><span class="line">  <span class="number">0x4C</span>, <span class="number">0x9F</span>, <span class="number">0xF7</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFC</span>, <span class="number">0x4F</span>, <span class="number">0x71</span>, </span><br><span class="line">  <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFC</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x71</span>, <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE8</span>, <span class="number">0x14</span>, <span class="number">0x4C</span>, <span class="number">0x9F</span>, </span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, </span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0xD0</span>, <span class="number">0x3C</span>, <span class="number">0x56</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0x69</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x72</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; (<span class="type">char</span>)(enc[i] ^ key[i] ^ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="obf"><a href="#obf" class="headerlink" title="obf"></a>obf</h2><p>屎山中的屎山，全是混淆。在与mz1大爹连蒙带猜各种调试后最终得出加密流程是一个异或和一个 xxtea 和一个异或以及另一个反转后异或，非常的杀时间<br>不写 wp 了</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
</search>
